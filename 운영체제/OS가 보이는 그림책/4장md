### 🔆 하드디스크의 구조
* 하드디스크는 프로그램이나 데이터를 저장해 두기 위한 대용량 기억 장치입니다.
* 하드디스크 안에는 자기로 기록할 수 있는 딱딱한 원반이 여러 장 들어있으며, 고속으로 회전하고 있습니다.
* 각 원반의 기록면은, 메모리의 주소와 비슷한 섹터와 트랙이라는 단위로 구분되어 있습니다.
* 이것은 하드디스크를 처음 사용할 때, 포맷이라는 초기화 작업을 수행하면 작성됩니다.
* 포맷에는 섹터의 데이터를 모두 초기화하는 물리적 포맷과 파일 시스템이 관리하는 영역만을 초기화하는 논리적 포맷이 있습니다.
* 파일 시스템을 '디스크 포맷'이라 부르는 경우도 있습니다.
* 데이터의 읽고 쓰기는 암(arm) 끝에 붙어 있는 자기 헤드가 고속으로 회전하는 디스크 위를 이동하면서 수행합니다.
* 하드디스크의 회전 속도는 rpm(1분당 회전수)로 표시하고, 이 값이 클수록 데이터의 읽고 쓰기 속도가 빠르며, os에 주는 부담을 덜 수 있습니다.
* 디스크에 저장된 데이터가 단편화(fragment) 되어 있으면, 읽고 쓰는 속도가 저하되므로, os에는 단편화를 해소하는 기능(디프래그 : defrag)도 있습니다.
</br>
<img src="https://user-images.githubusercontent.com/83942393/126310956-3d6cc5ed-28e8-4aa0-a12b-53ce99cde378.jpg" width="40%" height="40%"></img>
</br>

> 용어 설명
* 트랙(track) : 하드디스크의 기록면으로, 동심원 형태로 분할된 영역을 말한다.
* 섹터(sector) : 트랙을 다시 분할할 영역으로, 자기 디스크의 경우 섹터는 보통 512byte 의 영역을 가진다.
</br>

### 🏷️ 파일 시스템
* 하드디스크에 파일이나 디렉터리를 작성할 떄, 그것을 어떻게 기록할지를 정한 것을 '파일 시스템'이라고 합니다.
* 파일 시스템은 보안 강화나 대용량화에 맞춰 진화되어 왔습니다.
* os 마다 많은 종류의 파일 시스템이 있습니다. </br>
```
ex) windows 경우에는 FAT32 나 NTFS가 있으며, MacOS의 경우에는 HFS Plus 등이 있습니다.
```
* os 가 각 파일 시스템을 지원해주지 않으면, 해당 파일 시스템에 액세스할 수 없습니다.
* cd 나 dvd 와 같이 이동식 미디어 파일 시스템은 대부분의 os가 지원하고 있습니다.
* 프로그램이 os 를 통해 데이터를 파일과 주고받을 때의 '스트림(stream)'을 사용하며, '프로그램과 파일 사이의 데이터의 흐름'을 뜻합니다.
* 이 밖에도 압축, 검색, 리더던시와 같은 개념도 다룹니다. os 를 효율적으로 사용하기 위해서는 이런 것도 확실히 이해해 두어야 합니다.
</br>
![IMG_1149](https://user-images.githubusercontent.com/83942393/126312586-4b56a5d9-22a7-4686-b8da-65608134cbbf.jpg)
</br>

> 용어 설명
* 파일 시스템 : 기억 장치에 파일이나 디렉터리를 기록하는 방법으로, os 에 따라 다양한 파일 시스템이 있다.
* 단편화(fragmentation) : 하드디스크와 같은 기억 장치의 기억 영역에 단편적인 데이터가 저장되어 있는 상태를 말한다.
* 리더던시(redundancy) : 시스템의 리더던시는 시스템의 장애가 발생해도 큰 손실이 없도록 시스템 전체에 여유를 가지게 하는 것을 말한다.
</br>

## 💎 01 외부 기억 장치의 종류
하드웨어로서의 외부 기억 장치를 액세스 방식별로 살펴봅시다.

### 데이터의 액세스 방식
프로그램이나 데이터를 저장하는 외부 기억 장치는 데이터의 액세스 방식별로 다음과 같이 분류할 수 있습니다.

> 랜덤 액세스
* 하드디스크 드라이브처럼, 기억 영역상에 있는 목적 데이터에 직접 액세스하는 방식을 '랜덤 액세스(random access)'라고 합니다.
* 고속으로 데이터에 액세스할 수 있습니다. </br>
![IMG_1150](https://user-images.githubusercontent.com/83942393/126313159-31e86e39-af02-4319-ac2d-d6f292c8de00.jpg)

NOTE_ 디스크를 읽고 쓰는 자기 헤드가 목적하는 기억 영역 장소로 이동하는 것을 '시크(seek)'라고 합니다.

* 랜덤 액세스를 채택하고 있는 외부 기억 장치에는 다음과 같은 것들이 있습니다.
![IMG_1151](https://user-images.githubusercontent.com/83942393/126313328-d9ed3b1b-5ae6-47e7-826f-8c0639a5ef5a.jpg)

> 시퀀셜 액세스
* 자기 테이프와 같이, 기억 영역의 맨 처음부터 데이터를 순서대로 검색하여 액세스해 나가는 방법을 '시퀀셜 액세스(sequential access)'라고 합니다.
* 기억 영역의 뒤쪽에 있는 데이터에 액세스하는 데는 시간이 걸립니다.
![IMG_1152](https://user-images.githubusercontent.com/83942393/126313466-8575d6fd-2ce6-4555-a0f2-ba97d1ab515a.jpg)

* 시퀀셜 액세스를 사용하고 있는 외부 기억 장치로는 다음과 같은 것들이 있습니다.
IMG_1153.jpg![IMG_1153](https://user-images.githubusercontent.com/83942393/126313537-8f03012d-b9af-4664-8833-6a3fe31b0d68.jpg)

NOTE_ 플래시 메모리나 SD 메모리 카드는 랜덤 액세스와 시퀀셜 액세스 모두 채택하고 있지만, 대부분이 시퀀셜 액세스입니다.

NOTE_ 데이터의 액세스 방법 외에도, 쓰기 가능 유무로도 분류할 수 있어요.
![IMG_1154](https://user-images.githubusercontent.com/83942393/126313711-3c68d98e-ee1c-47c2-a21f-85a8b1b6fcb6.jpg)

## 💎 02 디스크 시스템
os 에 따른 외부 기억 장치의 할당 방법 차이에 대해 살펴봅시다.

### 외부 기억 장치의 할당
os에 따라 하드디스크와 같은 외부 기억 장치가 어떻게 할당되는지, 어떻게 사용되는지가 다릅니다.

> windows
* 하드디스크 드라이브 등을 '드라이브(drive)'라는 단위로 할당합니다.
* 대부분, 첫 번째 하드디스크를 c로 해서 영문자를 순서대로 붙이는데, c 드라이브, d 드라이브, ... 등으로 부릅니다.
* 또한 디렉터리 경로에 쓸 때는 C:, D: 로 씁니다.
I![IMG_1155](https://user-images.githubusercontent.com/83942393/126314066-d14b1ae9-fd01-490b-9f27-223be4a41716.jpg)

NOTE_ 데이터 기억 매체를 괸리하는데 쓰는 단위를 '볼륨'이라고 해요. 네이버 지식 백과 [LINK](https://terms.naver.com/entry.naver?docId=841213&cid=42344&categoryId=42344)

* 하나의 하드디스크를 분할하여 드라이브를 할당할 수도 있습니다. 분할한 각 영역을 '파티션'이라고 합니다.
![IMG_1156](https://user-images.githubusercontent.com/83942393/126314607-b9710006-24d5-442d-9c29-b7254c676501.jpg)

> Unix
* unix 에서는 접속된 외부 기억 장치가 dev 디렉터리 아래의 폴더로 나타납니다.
![IMG_1157](https://user-images.githubusercontent.com/83942393/126314694-6297d8e1-601c-4105-92ff-c68be956b457.jpg)

### 마운트
* 컴퓨터에 연결한 외부 기억 장치를 디렉터리 계층으로 이용할 수 있는 상태로 만드는 것을 '마운트(mount)'라고 합니다.
* 반대로, os의 인식을 해제하는 것을 '언마운트(unmount)'라고 합니다.
![IMG_1158](https://user-images.githubusercontent.com/83942393/126314836-f377e433-10ed-4521-bff1-9e49886fe569.jpg)

### 물리 볼륨과 논리 볼륨
* 이 페이지의 예에서는 하드디스크 드라이브 자체를 볼륨으로 하고 있는데, 여러 개의 하드디스크 드라이브를 통합한 일부를 볼륨으로 간주하는 기능도 있습니다.
* (UNIX의 논리 볼륨 관리자, Windows의 동적 디스크 등)
![IMG_1159](https://user-images.githubusercontent.com/83942393/126315036-be130afc-0bdf-4d41-b850-9f7c1963d590.jpg)


## 💎 03 파일과 디렉터리

### 파일
* os 는 데이터를 파일 단위로 관리합니다.
* 파일은 크게, os 에서 실행할 수 있는 프로그램 파일과, 정보가 기록되어 있을 뿐인 데이터 파일 두 가지로 나눌 수 있습니다.
![IMG_1160](https://user-images.githubusercontent.com/83942393/126315289-ce194eac-d366-4f5c-88f6-32992cd9529b.jpg)

* 파일명 끝에 있는 '.'(닷) 이후를 확장자 (UNIX에서는 '서픽스')라고 합니다.
* 이는 파일의 종류를 나타내는 데 활용됩니다.
* 특히, windows에서는 확장자가 실행 애플리케이션과 연결되어 특별한 의미를 가집니다.

DataFile.txt

확장자의 예)
| 확장자 | 개요 |
|:----------|:----------|
| bin | 바이너리 데이터 전반을 나타낸다. |
| dat | 데이터 파일 전반을 나타낸다. |
| sys | os 나 프로그램의 설정을 기술한 파일 전반을 나타낸다. |
| exe/com | windows의 실행 가능 파일이다. |
| txt | 텍스트 파일(문자 이외의 정보를 포함하지 않은 파일) 이다. |
| htm/html | HTML로 기술된 웹상의 도큐먼트 파일이다. |
| jpg | JPEG 형식으로 압축된 정지 그림 파일이다. |
| gif | 256 색까지 취급할 수 있는 정지 또는 애니메이션 그림 파일이다.
| bmp | windows의 정지 그림 파일이다. |
| mpg | MPEG 형식으로 압축된 동영상 파일이다. |
| pdf | Adove System사의 전자 문서 파일이다. |
| zip | ZIP 형식으로 압축된 파일이다. |

### 디렉터리(폴더)
* 최근의 os에서는 파일을 계층 구조로 된 디렉터리(windows 및 mac 에서는 폴더라고 함) 안에 저장하여 관리합니다.
* 최상위 디렉터리를 '루트 디렉터리', 그 아래 것을 '서브 디렉터리'라고 합니다.
![IMG_1161](https://user-images.githubusercontent.com/83942393/126316343-4e3e95d4-8ed5-411d-b7a9-d4d8463d498f.jpg)

NOTE_ 사용자가 현재 작업 중인 디렉터리를 '커런트 디렉터리'라고 합니다.

### 디렉터리 경로
* 파일이 있는 특정 디렉터리까지의 경로를 '디렉터리 경로(path)'라고 합니다.
* 루트 디렉터리부터 도달하는 것을 '절대 경로', 특정 디렉터리를 기준으로 한 것을 '상대 경로'라고 합니다.
![IMG_1162](https://user-images.githubusercontent.com/83942393/126316552-46f0dff7-1929-4720-bac5-5d8c5da43066.jpg)

## 💎 04 트랙과 섹터
하드디스크의 기록면 구조에 대해 살펴봅시다.

### 하드디스크의 구조
하드디스크는 **플래터(platter)** 라는 원반이 여러 장 조합된 구조로 이루어져 있습니다.
![IMG_1187](https://user-images.githubusercontent.com/83942393/126317093-a30f44c7-d33d-4585-983f-6866872c59f6.jpg)

### 트랙과 섹터
* 디스크의 기록면은 '트랙(track)'이라는 동심원 상태인 영역으로 분할되어 있습니다.
* 트랙을 다시 분할한 영역을 '섹터(sector)'라고 합니다.
* 또한 트랙의 모음을 '실린더(cylinder)'라고 합니다.
![IMG_1188](https://user-images.githubusercontent.com/83942393/126317309-415c3b25-6704-491f-b04a-f03fc16d21ce.jpg)

> 하드디스크의 기억 용량 계산 방법
`하드디스크의 기억 용량` = `섹터 사이즈` x `1트랙당 섹터 수` x `1실린더당 트랙수` x `실린더 수`

> 하드 디스크의 속도 계산 방법
`하드디스크 속도` = `1트랙의 용량` x `1초당 회전 수 `

### 클러스터
os가 파일을 취급할 때는, 섹터 단위가 아니라 섹터를 몇 개 모은 '클러스터(cluster)'라는 단위로 관리합니다.

ex) 1클러스터 = 4 섹터인 경우
IMG_1163.jpg![IMG_1163](https://user-images.githubusercontent.com/83942393/126317777-b7114447-feb1-4667-b05a-ae9d21c1711e.jpg)

NOTE_ 클러스터에 파일을 할당할 때 발생하는 미사용 영역은 프레그먼테이션의 원인이 돼요.

## 💎 05 디스크 포맷
기억 장치의 파일 시스템과 그 초기화 작업이라는 뜻을 가진 포맷에 대해 살펴봅시다.

### 파일 시스템
기억 장치에 파일이나 디렉터리를 기록하는 방법을 파일 시스템(또는 디스크 포맷)이라고 합니다.
파일 시스템은 os에 따라 다르며, 다음과 같은 것들이 있습니다.
os 가 지원하지 않는 파일 시스템에는 액세스할 수 없습니다.

* FAT 32
  * windows의 파일 시스템 중 하나로, 디스크 영역의 사용 효율이 좋으며, 과거의 os 와 호환성이 높다.
    * 최대 파일 사이즈 : 4GB
    * 최대 볼륨 사이즈 : 2TB

* NTFS
  * windows 에서 주로 사용하는 파일 시스템으로, 검색 기능의 고속화 및 파일에 대한 액세스 제한 기능이 추가되었다.
    * 최대 파일 사이즈 : 16TB
    * 최대 볼륨 사이즈 : 256TB

* HFS Plus
  * Mac OS 에서 채택하고 있는 파일 시스템으로, 종래의 HFS와 비교해 대용량 파일을 지원한다.
    * 최대 파일 사이즈 : 2TB~8EB(Extrabyte)
    * 최대 볼륨 사이즈 : 2TB~8EB
    (Mac OS 버전에 따라 다르다.)
    
* ext3
  * Linux의 파일 시스템으로, OS 정지 시나 파일의 손상에 강한 저널링(journaling) 기능이 특징이다.
    * 최대 파일 사이즈 : 2TB
    * 최대 볼륨 사이즈 : 32TB

* ISO9660
  * CD_ROM의 파일 시스템으로, 다양한 os 에서 읽을 수 있다.
    * 최대 파일 사이즈 : 4GB
    * 최대 볼륨 사이즈 : 8TB

* UDF
  * 광디스크의 파일 시스템으로, 디스크의 대용량화로 인해 ISO9660을 대신하여 DVD나 BD에 채택되었다.
    * 최대 파일 사이즈 : 16EB
    * 최대 볼륨 사이즈 : 128TiB(Tebibyte)


NOTE_ 디스크의 대용량화나 보안 강화를 처리하기 위해 발전했어요.

### 디스크의 초기화
하드디스크를 사용하려면, 파티션을 작성한 후에 다음과 같은 초기화 처리를 순서대로 수행해야 합니다.

> 물리 포맷
* 섹터에 기록된 모든 데이터는 모두 삭제됩니다.
* 물리 포맷을 수행하지 않으면, 기억 장치로 사용할 수 없습니다.
![IMG_1164](https://user-images.githubusercontent.com/83942393/126320339-f58e0b39-33f4-49e0-be50-a0f26e536f9c.jpg)

> 논리 포맷
* 파일 시스템이 관리하는 영역을 작성합니다.
* 다른 파일 시스템을 사용할 때는 논리 포맷이 필요합니다.
* 논리 포맷은 섹터의 구획(토지 따위를 경계를 지어 가름 또는 그런 구역)을 정리합니다.
![IMG_1165](https://user-images.githubusercontent.com/83942393/126320523-5421fa23-5761-48e9-a8a1-41c27e76a562.jpg)

## 💎 06 파일 작성
프로그램에서 파일을 읽고 쓸 때의 데이터의 흐름에 대해 살펴봅시다.

### 스트림
프로그램이 파일을 읽고 쓸 때, 그 프로세스와 파일 간에 데이터가 통하는 길을 만들어서 주고받기를 하는데, 이 통로를 흐르는 데이터의 흐름을 '스트림(stream)'이라고 합니다.
IMG_1166.jpg![IMG_1166](https://user-images.githubusercontent.com/83942393/126320814-e5b9f394-4716-4ffa-8a85-c88631d9cf8e.jpg)
* 시스템 콜을 받아서, 커널이 프로세스와 파일을 연결합니다.

* 스트림에 대한 조작으로는 다음과 같은 것이 있습니다.
![IMG_1167](https://user-images.githubusercontent.com/83942393/126320905-f2c4f438-4e0c-4591-9dd7-4e288ba68512.jpg)

### 파일 조작하기
os에는 파일이나 디렉터리에 대해 다음과 같은 조작을 수행하는 기능이 있습니다.
![IMG_1168](https://user-images.githubusercontent.com/83942393/126321013-7ee27eb1-5031-4c7f-81cc-795d1c6d3d6f.jpg)

## 💎 07 프래그먼테이션
디스크를 계속 사용하면 기억 영역이 단편화(조각화)됩니다.

### 프래그먼테이션
* 하드디스크와 같은 기억 장치의 기억 영역에 단편적인 데이터가 저장되어 있는 상태를 '프래그먼테이션(fragmentation: 단편화')라고 합니다.
* 프로그래먼테이션이 있으면 os 가 데이터를 읽어드리는 작업이 느려집니다.
![IMG_1169](https://user-images.githubusercontent.com/83942393/126321276-e322daee-0e28-4657-b886-523ad231a8cf.jpg)

NOTE_ 하나의 파일이 여러 트랙에 분할되어 기록되어 있기 때문에 시크 횟수가 증가하여 액세스하는 데 시간이 걸려요.

### 디프래그
프래그먼테이션을 해소하기 위해, 단편화된 디스크의 기억 영역을 연속된 영역으로 다시 기록하는 것을 '디프래그(defrag)'라고 합니다.
```
메모리의 단편화 해소 -> 컴팩션
디스크의 단편화 해소 -> 디프래그
(메모리와는 용어가 다르므로 주의합시다.)
```
디프래그는 용량이 적은 파일일수록 효과적입니다.
![IMG_1170](https://user-images.githubusercontent.com/83942393/126321669-1c102734-f04c-4cd8-8e57-a8c8d211596e.jpg)

NOTE_ 시크 횟수를 줄이고, os의 부담을 적게 만들어요.

> 디스크의 액세스 시간
`디스크 액세스 시간` = `평균 시크 시간` + `회전 대기 시간(1회전에 소요되는 시간/2)` + `데이터 전송 시간 (섹터 사이즈 / 데이터 전송 속도)`  `데이터 전송 속도 = 1 트랙의 기록 용량 / 1 회전에 소요되는 시간 `

ex) 다음과 같은 성능을 가진 하드디스크가 한 블록(블록=연속된 섹터)의 데이터를 전송하는 경우

| 회전 속도 | 2,000\[회전/분](=1/30\[회전/ms]) | (1회전에 소요되는 시간 = 30ms)
|:----------|:----------|
| 평균 시크 시간 | 10\[ms] |
| 1트랙당 기억 용량 | 9,000\[byte] |
| 섹터 사이즈 | 3,000\[byte] |

회전 대기 시간 = 30 % 2 = 15\[ms]
데이터 전송 속도 = 9,000[byte] % 30 = 300\[byte/ms]
데이터 전송 시간 = 3,000\[byte] % 300\[byte/ms] = 10 \[ms]
액세스 시간 = 10 + 15 + 10 = 35\[ms]

## 💎 08 사용자별 파일 관리
액세스 권한에 따라 보호되는 파일에 대해 살펴봅시다.

### 액세스 권한
파일에는 읽기나 쓰기와 같은 액세스를 허가하는 정보가 정의되어 있으며, 특정 사용자나 그룹으로 액세스 권한을 설정할 수 있습니다. 이 권한을 '퍼미션(permission)' 이라고 합니다.

| | 읽기 | 쓰기 | 실행 |
|:-----:|:-----:|:-----:|:-----:|
| 사용자 A | O | O | O |
| 사용자 B | O | X | O |
| 사용자 C | X | X | X |

NOTE_ 파일 시스템에서 관리하는 퍼미션 목록을 '액세스 제어 목록'이라고 해요.

### 쿼터
여러 사용자가 os 를 공유할 때, 각 사용자가 사용할 수 있는 하드디스크 용량의 상한값을 설정할 수 있는데, 이를 '쿼터(quota)'라고 합니다.
쿼터 이상으로 데이터를 쓰려고 하면 os가 쓰기를 거부합니다.

NOTE_ 쿼터를 '방의 넓이', 데이터를 '가구'라고 생각하면 이해하기 쉬워요.

## 💎 09 디스크 캐시
데이터 처리를 고속화하는 장치인 캐시에 대해 살펴봅시다.

### 고속화 장치
* 하드디스크의 처리 능력은 cpu 나 메모리에 비해 매우 느립니다.
* 이런 하드디스크의 결점을 보완하기 위해, 하드디스크에는 읽어들인 데이터를 일시적으로 저장하기 위한 메모리가 마련되어 있는데, 이를 '디스크 캐시(disk cache)'라고 합니다.

![IMG_1171](https://user-images.githubusercontent.com/83942393/126324485-f38b6472-2c77-4776-a6c1-940c90bfe95a.jpg)

NOTE_ 동일한 데이터를 자주 읽어들일 때 효과적이예요.

### RAM 디스크
네이버 지식 백과 [LINK](https://terms.naver.com/entry.naver?docId=1180272&cid=40942&categoryId=32832)

* 빠른 속도로 자료를 처리할 필요가 있을 때, 주기억장치인 RAM의 용량 중 사용하지 않는 여분의 기억공간을 마치 보조기억장치인 디스크처럼 사용하는 것을 말합니다.
* 보조기억장치에 들어 있는 프로그램이나 자료를 램에 미리 복사해 놓은 다음, 그곳에서 자료를 처리한 후에 최종결과를 보조기억장치로 옮겨 놓습니다.
* 기계적인 동작이 없기 때문에, 보통의 디스크에 비해 고속으로 액세스할 수 있지만, 가격이 비싸고, 전원을 끄면 내용이 사라집니다.

ex) windows 32 비트판에서는 최대 4GB 까지 탑재할 수 있는 컴퓨터에서도, 메인 메모리로 3GB 이상은 사용할 수 없지만, 나머지 1GB의 영역을 RAM 디스크로 이용할 수 있습니다.
![IMG_1172](https://user-images.githubusercontent.com/83942393/126325671-b4302832-dd84-40f9-89d6-d940ca0791e9.jpg)

NOTE_ 최근에는 캐시 메모리나 SSD로 충분한 성능을 얻고 있기 때문에 별로 사용하지 않아요.

## 💎 10 압축
파일을 압축하면 크기가 줄어들어 데이터 전송 시 부담을 덜 수 있습니다.

### 압축의 구조
* 압축이란, 데이터를 숫자적으로 변환하여 내용을 유지한 채 크기를 줄이는 것을 말합니다.
* 파일을 실제로 사용할 때는 원래의 형식으로 복원해야 하는데, 이를 '압축 해제(또는 압축 풀기)'라고 합니다.

### 가역 압축
파일 내용이 손실되지 않는 압축을 '가역 압축'이라고 합니다.
프로그램이나 금융 데이터와 같이 압축으로 인해 내용이 변하면, 곤란한 파일은 가역 압축을 수행합니다.
![IMG_1176](https://user-images.githubusercontent.com/83942393/126326129-88c0ed66-442f-4c5c-98a0-2b22bcb2b895.jpg)

> RLE(Run Length Encoding : 런 렝스 인코딩) 방식
동일한 요소가 몇 개 있는지를 세어서 그 수를 데이터로 하는 방법입니다.
![IMG_1173](https://user-images.githubusercontent.com/83942393/126326263-10e62d15-2c66-4878-beac-1436c1fde820.jpg)

> Huffman(허프만) 방식
출현 빈도가 높은 요소에는 짧은 문자열을, 출현 빈도가 낮은 요소에는 긴 문자열을 치환하는 방법입니다.
![IMG_1174](https://user-images.githubusercontent.com/83942393/126326373-b42115c8-b4b2-40fa-bd8e-c34c79bc0993.jpg)

### 비가역 압축
파일 내용이 다소 손실되는 것을 허용하는 압축을 '비가역 압축'이라고 합니다.
주로 크기가 커지기 쉬운 그림, 음성, 동영상 분야에서 활용되는데, 사람이 느끼기 힘들 정도의 미세한 정보를 삭제하므로, 그냥 봐서는 화질(음질)의 열화를 느낄 수 없습니다.
![IMG_1175](https://user-images.githubusercontent.com/83942393/126326543-dccb18b5-534e-4038-b083-d509b1565271.jpg)

NOTE_ 비가역 압축에서는 압축 전과 압축 후의 데이터가 완전히 일치하지 않아요.

## 💎 11 검색
디스크 안에서 파일을 찾거나 파일에 포함된 내용을 찾습니다.

### 파일 검색
os 에는 파일이나 디렉터리(폴더)의 저장 장소를 검색하는 기능이 마련되어 있습니다.
os 가 관리하는 파일의 종류가 늘어나면, 검색 기능의 중요성도 높아집니다.
![IMG_1178](https://user-images.githubusercontent.com/83942393/126326769-bfb4a6e1-d197-4d36-a37d-c2de31c4c54a.jpg)

NOTE_ 검색 결과는 캐시로 저장되어, 다음 검색부터는 빠르게 검색할 수 있어요.

### 인덱스화
인덱스(Index)란, 파일의 목차입니다.
파일에 독자적인 번호를 붙여서 관리함으로써, 디스크상의 모든 파일을 직접 조사할 필요가 없어지며, 검색 속도도 향상됩니다.
![IMG_1179](https://user-images.githubusercontent.com/83942393/126326951-262407d3-c3e3-43ec-a7f8-eaa5b4270ad7.jpg)

### 풀텍스트 검색
여러 파일의 내용을 조사하여 **특정 문자열을 검색하는 것** 을 '풀텍스트 검색(fulltext search)'라고 합니다.
풀텍스트 검색에는 다음과 같은 검색 방법이 있습니다.

> 순차 주사 검색
여러 개의 파일을 순차적으로 주사(走査)하여 검색 대상이 되는 문자열을 찾습니다. 
(주사: 파일이나 프로그램의 내부를 검색하여 필요한 항목을 찾는 일.)
파일 수가 많을수록 검색 속도는 느려집니다.

![IMG_1180](https://user-images.githubusercontent.com/83942393/126327383-a8fbe5d8-55e6-4949-8bdc-e2511d2e59df.jpg)

> 인덱스 검색
사전에 파일을 조사하여 색인을 준비해 두고 그 안에서 검색합니다.
검색 대상 파일 수가 방대할 때 고속으로 검색할 수 있습니다.
![IMG_1181](https://user-images.githubusercontent.com/83942393/126327461-5dff3129-9648-4c9c-9b2e-3b34ebb4bb63.jpg)

## :gem 12 리던던시
중요한 시스템 설계에는 '리던던시(redundancy)'를 지니게 하는 것이 상식입니다.
리더던시 : 1. (인력 과잉에 따른) 정리 해고(감원 조치) 2. 불필요한 중복(반복)

### 시스템의 리던던시
시스템에 장애가 발생해도 큰 손실이 나지 않도록 기기를 최소 필요한 것 이상으로 마련하여 시스템 전체에 여유를 가지게 하는 것을 '시스템의 리던던시(여유도)'라고 합니다.
시스템의 리던던시 방법에는 다음과 같은 종류가 있습니다.

